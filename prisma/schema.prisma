// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Teacher {
  id           String    @id @default(cuid())
  userId       String
  schoolId     String
  employedAt   DateTime
  unemployedAt DateTime?
  subjects     Subject[]
  school       School    @relation(fields: [schoolId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User[]
}

model Student {
  id               String   @id @default(cuid())
  schoolId         String
  userId           String
  yearOfGraduation Int
  school           School   @relation(fields: [schoolId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User[]
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?
}

model School {
  id        String    @id @default(cuid())
  name      String
  location  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User[]
  Teacher   Teacher[]
  Student   Student[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Teacher       Teacher?  @relation(fields: [teacherId], references: [id])
  Student       Student?  @relation(fields: [studentId], references: [id])
  School        School?   @relation(fields: [schoolId], references: [id])
  schoolId      String?
  teacherId     String?
  studentId     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
